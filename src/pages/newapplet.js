import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import Sidebar from "../components/sidebar";
import Actiontrig from "../components/trigactn";
import NavBar from "@/components/navbar";
import Link from "next/link";
import { useRouter } from 'next/router';
import { useAccount } from 'wagmi'
import { useFilePicker } from "use-file-picker";
import { FileSizeValidator } from "use-file-picker/validators";

export default function Home() {

  const { address, isConnecting, isDisconnected } = useAccount()
  const router = useRouter();
  const [navbar, setNavbar] = useState(false);
  const [appletName, setAppletName] = useState('myapplet');
  const [appletDescription, setAppletDescription] = useState('description..');
  const [ownershipContractAddress, setOwnershipContractAddress] = useState('');
  const [actionValue, setActionValue] = useState('');
  const [periodOfActivity, setPeriodOfActivity] = useState({
    startDate: null,
    endDate: null,
  });
  const [triggerBlockchain, setTriggerBlockchain] = useState([]);
  const [triggerType, setTriggerType] = useState([]);
  const [service, setService] = useState([]);
  const [actionType, setActionType] = useState([]);
  const [selectedImage, setSelectedImage] = useState();
  const ImagePicker = useFilePicker({
    readAs: "DataURL",
    accept: "image/*",
    validators: [
      new FileSizeValidator({
        maxFileSize: 50 * 1024 * 1024 /* 50 MB */,
      }),
    ],
  });

  // cons

  const handleCreateClick = async () => {
    const data = {
      address,
      appletName,
      appletDescription,
      ownershipContractAddress,
      actionValue,
      periodOfActivity,
      triggerBlockchain,
      triggerType,
      service,
      actionType,
    };
    console.log("create applet data", data);
    try {
      const response = await fetch('/api/event', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Add any other headers needed for authentication, etc.
        },
        body: JSON.stringify(data),
      });

      const responseData = await response.json();
      console.log('responsedata', responseData);
      // Show response in an alert
      // alert(JSON.stringify(responseData));
      if (response.ok) {
        // Redirect to another page upon successful API post
        router.push(`/qrpage?id=${responseData.documentid}`); // Replace '/success-page' with your desired route
      }
    } catch (error) {
      // Handle error, show an error alert
      alert('Error creating data');
      console.error('Error:', error);
    }
  };
  return (

    <div>
      <Head>
        <title>BlockIoT-New Applet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="Logo.svg" />
      </Head>

      <body className="flex flex-col h-screen">
        <div className="">
          <NavBar />
        </div>

        {/* <div>
        <Sidebar />
      </div> */}
        <div className="main-body h-fit flex justify-center">

          <Actiontrig

            appletName={appletName}
            setAppletName={setAppletName}
            appletDescription={appletDescription}
            setAppletDescription={setAppletDescription}
            periodOfActivity={periodOfActivity}
            setPeriodOfActivity={setPeriodOfActivity}
            triggerBlockchain={triggerBlockchain}
            setTriggerBlockchain={setTriggerBlockchain}
            triggerType={triggerType}
            setTriggerType={setTriggerType}
            service={service}
            setService={setService}
            actionType={actionType}
            setActionType={setActionType}
            ownershipContractAddress={ownershipContractAddress}
            setOwnershipContractAddress={setOwnershipContractAddress}
            actionValue={actionValue}
            setActionValue={setActionValue}
            selectedImage={ImagePicker.filesContent[0]}
            openImagePicker={ImagePicker.openFilePicker}

          />
        </div>


        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          onClick={handleCreateClick}
        >
          Create
        </button>



      </body>

      {/* <Footer /> */}
    </div>
  );
}
